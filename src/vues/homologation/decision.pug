include ../fragments/diagnostics

doctype html
meta(charset='utf-8')

block styles
  link(href='/statique/assets/styles/fonts.css', rel='stylesheet')
  link(href='/statique/assets/styles/decision.css', rel='stylesheet')

header
  .mss
    h1 Mon Service <b>Sécurisé</b>
    p Sécuriser les service publics numériques
  .anssi Agence nationale de la sécurité des systèmes d'information (ANSSI)

main
  h1.bleu Décision d'homologation de sécurité
  if homologation.seuilCriticiteTropEleve()
    section.alerte
      div.
        Compte tenu des risques auxquels votre service est susceptible de faire
        face, aux vues des fonctionnalités offertes et de la sensibilité des
        données traitées, l'ANSSI vous recommande de réaliser une démarche
        d'homologation approfondie en vous appuyant sur le « guide d’homologation
        en 9 étapes ».
      br
      div.
        Celle-ci peut être effectuée en substitution ou en complément d'une
        démarche via Mon Service Sécurisé. Le cas échéant, toutes les pièces
        complémentaires au dossier d'homologation recommandées dans le guide en 9
        étapes devront être jointes au dossier généré sur Mon Service Sécurisé.

  section.introduction
    h2!= homologation.nomService()
    dl
      dt Type :
      dd= homologation.descriptionNatureService()
      dt Objet :
      dd= homologation.presentation()
      dt Développé par :
      dd= homologation.structureDeveloppement()
      dt Hébergement et localisation des données :
      dd= `${homologation.hebergeur()}, ${homologation.localisationDonnees()}`

  section.risques
    h2 Principaux risques de sécurité identifiés
    p Suggestions de l'ANSSI, détails en annexe
    ul
      each donneesRisque in referentiel.risques()
        li= donneesRisque.description

  section.mesures
    h2 Mesures de sécurité retenues
    p Recommandées par l'ANSSI, détails en annexe

    .legende
      .planifie Planifiées
      .fait Mises en œuvre

    - const statistiquesMesures = homologation.statistiquesMesures()
    - const categories = statistiquesMesures.categories()
    ul
      if categories.length === 0
        li Aucune mesure retenue

      each idCategorie in categories
        - const pourcentage = 100 * statistiquesMesures.misesEnOeuvre(idCategorie) / statistiquesMesures.retenues(idCategorie)
        - let style = `width: ${pourcentage}%;`
        - if (pourcentage === 0) style += ' border: none;'
        - if (pourcentage > 97) style += ' border-radius: 3px;'
        li
          .nombre-mesures= `${statistiquesMesures.retenues(idCategorie)} mesures de`
          .type-mesure= referentiel.descriptionCategorie(idCategorie)
          .barre(id = idCategorie)
            .barre-mesures-retenues
            .barre-mesures-misesEnOeuvre(style = style)

  section.niveau-securite
    h2 Niveau de sécurité indicatif
    p Calculé à partir du pourcentage de mesures recommandées par l'ANSSI mises en œuvre
    +diagnosticNiveauSecurite

    ul
      li
        .pourcentage= `${Math.round(100 * homologation.proportionMesuresIndispensablesMisesEnOeuvre())}%`
        .criticite-mesure des <b>mesures indispensables</b> selon l'ANSSI mises en œuvre
      li
        .pourcentage= `${Math.round(100 * homologation.proportionMesuresRecommandeesMisesEnOeuvre())}%`
        .criticite-mesure des <b>autres mesures suggérées</b> mises en œuvre

  section
    h2 Avis de l'expert cyber
    p sur le maintien ou la mise en service
    +avisExpertCyber
    dl
      dt Expert cybersécurité :
      dd= homologation.partiesPrenantes.descriptionExpertCybersecurite()

      dt Recommandations additionnelles :
      if homologation.avisExpertCyber.commentaire
        dd= homologation.avisExpertCyber.commentaire
      else
        dd Aucune

  section
    h2 Équipe
    dl
      dt Décision d'homologation préparée par :
      dd= homologation.descriptionEquipePreparation()

  section
    h2 Calendrier
    dl
      dt Date de renouvellement de l'homologation :
      dd= homologation.descriptionExpiration()

  section.decision
    h2 Décision d'homologation
    dl
      dt Autorité d'homologation :
      dd= homologation.descriptionAutoriteHomologation()
    p.signature Lu et approuvé | date | signature
    ul
      li Conformité au référentiel général de sécurité (RGS)
      li.
        Contribue à la mise en conformité avec les obligations du règlement
        européen pour la protection des données à caractère personnel (RGPD) en
        matière de « sécurité du traitement des données »
    p.notes-finales.
      Par la signature de cette décision, vous attestez avoir pris connaissance
      des risques principaux pour le service numérique et des mesures de
      sécurité retenues, sur la base des informations fournies dans le présent
      dossier et ses pièces jointes. Vous validez son maintien ou sa mise en
      service, dont la sécurité devra être maintenue dans la durée. Une fois
      signée, la décision d'homologation pourra être publiée sur
      MonServiceSécurisé et sur « !{homologation.nomService()} ».
      MonServiceSécurisé et l'ANSSI ne peuvent en aucun cas être tenus
      responsables d'incidents de sécurité susceptibles d'affeter le service
      numérique homologué et des conséquences qui pourraient en découler.

  .saut-page
  h1.vert Annexe 1 – Détail des risques principaux
  .annexe
    section.detail-risques
      dl
        each donneesRisque in referentiel.risques()
          dt= donneesRisque.description
          dd= donneesRisque.descriptionLongue

  .saut-page
  h1.vert Annexe 2 – Détail des mesures de sécurité
  .annexe
    .legende
      .nonRetenu Non concerné
      .planifie Planifiées
      .fait Mesures mises en œuvre
    .legende.avis-anssi
      .indispensable Mesure indispensable (ANSSI)

    section.detail-mesures
      h2 Mesures de gouvernance
      p S'organiser pour gérer la sécurité du service

      ul
        if homologation.mesuresNonSaisies()
          li Aucune mesure retenue

        - let i = 0;
        - const nbMesures = homologation.mesures.nombre()
        while i < nbMesures
          - const mesure = homologation.mesures.mesure(i)
          li
            .description= mesure.description()
            .statut(class = mesure.statut)
            if mesure.estIndispensable()
              .indispensable
          - i++
