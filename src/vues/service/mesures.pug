extends ../parcoursService
include ../fragments/inputChoix
include ../fragments/cartesInformations
include ../fragments/texteTronque

mixin inputMesure({ nom, titre, indispensable, lectureSeule = false })
  +inputChoix({
    type: 'radio',
    nom: nom,
    titre: titre,
    items: service.descriptionStatutsMesures(),
    decoration: indispensable ? '<div class="mention-anssi mesure-indispensable">Indispensable</div>' : '',
    lectureSeule: lectureSeule
  })

block append styles
  link(href = '/statique/assets/styles/homologation/mesures.css', rel = 'stylesheet')
  link(href = '/statique/assets/styles/modules/validation.css', rel = 'stylesheet')

block header-titre-page
  h3
    +texteTronque({texte: service.nomService() || ''})

block titre
  h1 Sécuriser

block sous-titre
  h2 Mettre en oeuvre des mesures de sécurité adaptées

block formulaire
  - const estLectureSeule  = autorisationsService.SECURISER.estLectureSeule
  form.homologation#mesures
    p.informations-complementaires.
      Sélectionnez le statut de mise en œuvre de chaque mesure de sécurité
      et apportez des précisions, si nécessaire.
      Ces informations permettent de suivre la mise en œuvre des mesures de
      sécurité adaptées au service et d'évaluer son niveau de sécurité (Indice cyber).

    section
      nav
        a.actif Tout
        each categorie, identifiant in referentiel.categoriesMesures()
          a(id = identifiant)= categorie

      .mention champ obligatoire
      .specifiques
        #mesures-specifiques

      .mesures
        each donnees, identifiant in mesures
          .mesure(class = donnees.categorie)
            +inputMesure({
              nom: identifiant,
              titre: donnees.description,
              indispensable: donnees.indispensable,
              lectureSeule: estLectureSeule
            })

            .puce-information
              .rideau
                .modale
                  .fermeture-modale
                  h1= donnees.description
                  p!= donnees.descriptionLongue
    if (!estLectureSeule)
      .enregistrement
        button.bouton.bouton-secondaire.nouvel-item(type = 'button') Ajouter une mesure spécifique
        button.bouton(idHomologation = service.id) Enregistrer

  script(id = 'donnees-mesures-generales', type = 'application/json').
    !{JSON.stringify(service.mesures.toJSON().mesuresGenerales || [])}

  script(id = 'donnees-mesures-specifiques', type = 'application/json').
    !{JSON.stringify(service.mesures.toJSON().mesuresSpecifiques || [])}

  script(id = 'referentiel-categories-mesures', type = 'application/json').
    !{JSON.stringify(referentiel.categoriesMesures())}

  script(id = 'referentiel-statuts-mesures', type = 'application/json').
    !{JSON.stringify(referentiel.statutsMesures())}

  script(id = 'autorisations-securiser', type = 'application/json').
    !{JSON.stringify(autorisationsService.SECURISER)}

  script(type = 'module', src = '/statique/service/mesures.js')
