mixin inputChoix({ type, nom, titre, items, objetDonnees = homologation, messageErreur, decoration, requis = false })
  - let valeursSelectionnees = objetDonnees[nom]
  - if (typeof valeursSelectionnees === 'boolean') valeursSelectionnees = (valeursSelectionnees ? 'oui' : 'non')
  - const requisGroupe = requis && type === 'checkbox' && Object.keys(items).length > 1
  - const requisChamp = requis && (type === 'radio' || Object.keys(items).length === 1)
  - const classeGroupe = type === 'checkbox' ? 'casesACocher' : ''

  fieldset(id = nom, class = classeGroupe, required = requisGroupe)
    .titre= titre
      if decoration
        .decoration !{decoration}
    each donnees, identifiant in items
      - const { description, exemple } = donnees
      - const identifiantInput = `${nom}-${identifiant}`
      input(
        id = identifiantInput,
        name = nom,
        value = identifiant,
        type = type,
        checked = (
          Array.isArray(valeursSelectionnees)
            ? valeursSelectionnees.includes(identifiant)
            : identifiant === valeursSelectionnees
        ),
        required = requisChamp,
        title = ''
      )
      label(for = identifiantInput)= description
      br
      if exemple
        label.exemple(for = identifiantInput)= exemple
        br
    .message-erreur=messageErreur

mixin inputOuiNon({ nom, titre, objetDonnees, messageErreur, exempleOui, exempleNon, requis })
  +inputChoix({
    nom,
    titre,
    objetDonnees,
    messageErreur,
    requis,
    type: 'radio',
    items: { oui: { description: 'Oui', exemple: exempleOui }, non: { description: 'Non', exemple: exempleNon } },
  })
