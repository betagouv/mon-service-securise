extends base

mixin chiffre(texte, angle, classe)
  - const rayon = '3em';
  .chiffre(class=classe,style=`top: calc(${rayon} * cos(180deg - ${angle}deg)); left: calc(${rayon} * sin(180deg - ${angle}deg));`)!= texte

mixin statistiquesMesures({ id, statistiques = {},  camembert = {}})
  - const { total = 0, enCours = 0, nonFait = 0, fait = 0, restant = 0 } = statistiques
  - const chaineGradientConique = `background: conic-gradient(#75A1E8 ${camembert.enCours.debut}deg ${camembert.enCours.fin}deg, #D0E0F6 ${camembert.nonFait.debut}deg ${camembert.nonFait.fin}deg, #FFFFFF ${camembert.restant.debut}deg ${camembert.restant.fin}deg, transparent ${camembert.restant.fin}deg 360deg);`;
  - const chaineGradientConiqueFait = `background: conic-gradient(transparent 0deg ${camembert.fait.debut}deg, #0A4C8C ${camembert.fait.debut}deg ${camembert.fait.fin}deg);`;
  - const decalageCamemberFait = '4px'
  - const styleDecalageCamemberFait = `top: calc(${decalageCamemberFait} * cos(180deg - ${camembert.fait.milieu}deg)); left: calc(${decalageCamemberFait} * sin(180deg - ${camembert.fait.milieu}deg));`
  .statistiques-mesures
    .details
      .graphique-camemberts
        .camembert.bordure-reste-a-faire(style=`background: conic-gradient(#0F7AC7 0deg ${camembert.restant.fin}deg, transparent ${camembert.restant.fin}deg 360deg);`)
        .camembert.masque-reste-a-faire
        .camembert(style=chaineGradientConique)
        +chiffre(enCours, camembert.enCours.milieu, 'en-cours')
        +chiffre(nonFait, camembert.nonFait.milieu, 'non-fait')
        +chiffre(restant, camembert.restant.milieu, 'restant')
        .camembert.fait(style=`${chaineGradientConiqueFait}; ${styleDecalageCamemberFait}`)
        +chiffre(fait, camembert.fait.milieu, 'fait')
      .fleche
      .mesures-restantes
        p Il reste
        p.nombre-restantes #{restant} #{restant <= 1 ? `mesure`: `mesures`}
        p à mettre en œuvre

mixin totalMesures(totalMesuresGenerales, totalMesuresSpecifiques)
  .total.conteneur
    .contenu
      strong Total :
      span.
        &nbsp;#{totalMesuresGenerales} #{totalMesuresGenerales <= 1 ? `mesure proposée`: `mesures proposées`} par l'ANSSI
      if totalMesuresSpecifiques
        span &nbsp;+ #{totalMesuresSpecifiques} #{totalMesuresSpecifiques <= 1 ? `ajoutée`: `ajoutées`} par l'équipe.
      else
        span .
    .legende
      .legende-faites Faites
      .legende-en-cours En cours
      .legende-non-faites Non faites
      .legende-a-remplir À remplir

block page
  - const { service, referentiel, camembertIndispensables, camembertRecommandees } = donnees;
  .synthese-securite
    h1 Synthèse de la sécurité du service
    .separateur
    h2!=(service.descriptionService.organisationsResponsables[0])
    h3!=(service.nomService())
    .conteneur
      fieldset(class='resume')
        legend
          p Résumé
        .contenu
          dl
            dt Type :
            dd= service.descriptionTypeService()
          dl
            dt Données stockées :
            dd(class=`localisation-donnees ${service.localisationDonnees()}`)= service.descriptionLocalisationDonnees()
          dl
            dt Statut :
            dd= service.descriptionStatutDeploiement()
          dl
            dt Présentation :
            dd= service.presentation()
      fieldset(class='indice-cyber')
        - const indiceCyber = service.indiceCyber();
        - const noteMax = referentiel.indiceCyberNoteMax()
        - const formatIndiceCyber = Intl.NumberFormat('fr', { minimumFractionDigits: 1, maximumFractionDigits: 1 }).format;
        .contenu
          .score-indice-cyber
              .logo-indice-cyber
                img.logo
                div(class = `disque couleur-indice-cyber-${Math.floor(indiceCyber.total)}`)
                div(class = `curseur position-${Math.floor(indiceCyber.total)}`)
                .conteneur-note
                  span.note= formatIndiceCyber(indiceCyber.total)
                  span.note-max= `/${noteMax}`
          .indices-par-categories
            .titre
              p Par catégorie :
            .categories
              each id in referentiel.identifiantsCategoriesMesures()
                .indice-cyber-categorie
                  span= referentiel.descriptionCategorie(id)
                  span.note= (typeof indiceCyber[id] === 'number' ? `${formatIndiceCyber(indiceCyber[id])}` : '–')
      fieldset.mesures-securite
        legend
          p Mesures de sécurité
        .contenu
          p.type Par niveau de criticité
            .mesures-par-criticite
              .indispensables.conteneur
                p.titre Indispensables
                +statistiquesMesures({
                  id: 'mesures-indispensables',
                  statistiques: service.statistiquesMesuresIndispensables(),
                  camembert: camembertIndispensables.angles,
                })
              .recommandees.conteneur
                p.titre Recommandées
                +statistiquesMesures({
                  id: 'mesures-recommandees',
                  statistiques: service.statistiquesMesuresRecommandees(),
                  camembert: camembertRecommandees.angles,
                })
              +totalMesures(service.nombreTotalMesuresGenerales())
          p.type Par catégorie
            .mesures-par-categorie
              .graphiques.conteneur
                - const faites = (idCategorie) => service.statistiquesMesures().misesEnOeuvre(idCategorie)
                - const enCours = (idCategorie) => service.statistiquesMesures().enCours(idCategorie)
                - const nonFaites = (idCategorie) => service.statistiquesMesures().nonFaites(idCategorie)
                - const aRemplir = (idCategorie) => service.statistiquesMesures().aRemplir(idCategorie)

                each idCategorie in service.statistiquesMesures().categories()
                  .categorie
                    p.titre= referentiel.descriptionCategorie(idCategorie)
                    .graphique
                      if faites(idCategorie)
                        - const nbFaites = faites(idCategorie);
                        .statut.faites(style=`flex: ${nbFaites};`)= nbFaites
                      if enCours(idCategorie)
                        - const nbEnCours = enCours(idCategorie);
                        .statut.en-cours(style=`flex: ${nbEnCours};`)= nbEnCours
                      if nonFaites(idCategorie)
                        - const nbNonFaites = nonFaites(idCategorie);
                        .statut.non-faites(style=`flex: ${nbNonFaites};`)= nbNonFaites
                      if aRemplir(idCategorie)
                        - const nbARemplir = aRemplir(idCategorie);
                        .statut.a-remplir(style=`flex: ${nbARemplir};`)= nbARemplir
              +totalMesures(service.nombreTotalMesuresGenerales(), service.nombreMesuresSpecifiques())
      .conteneur-pied-page
        p.
          L'indice cyber est calculé sur la base des informations renseignées par l'équipe 
          concernant les mesures de sécurité proposées par l'ANSSI et à l'exclusion des mesures 
          spécifiques ajoutées. Il fournit une évaluation indicative du niveau de sécurisation 
          du service.
